nodePositions = []
        newNodes = []
        elementPositions = []
        newElements = []
        for element in self.__elements:
            node1 = False
            node2 = False
            newNode1 = None
            newNode2 = None
            if element.node1.getSupport() == Support.semi_fixed:
                n1 = Node(element.node1.x, element.node1.y - 1e-31)
                newNodes.append(n1)
                node1Index = self.__nodes.index(element.node1, 0, len(self.__nodes))
                nodePositions.append(node1Index)
                node1 = True

            if element.node2.getSupport() == Support.semi_fixed:
                newNodes.append(Node(element.node2.x, element.node2.y - 1e-31))
                node2Index = self.__nodes.index(element.node2, 0, len(self.__nodes))
                nodePositions.append(node2Index)
                node2 = True

            if node1:
                elementPositions.append(self.__elements.index(element, 0, len(self.__elements)))
            if node2:
                elementPositions.append(self.__elements.index(element, 0, len(self.__elements)) + 1)

        print("node positions: ", nodePositions)
        print('new nodes: ', newNodes)

        for index in nodePositions:
            newNodePos = nodePositions.index(index, 0, len(nodePositions))
            elem = Element(newNodes[newNodePos], self.__nodes[index], 1, 1, 1)
            newElements.append(elem)

        print("element positions: ", elementPositions)
        print('new elements', newElements)

        print(type(self.__nodes))

        incremento = 0
        for index in nodePositions:
            self.__nodes.insert(index + incremento, newNodes[nodePositions.index(index, 0, len(nodePositions))])
            incremento += 1

        incremento = 0
        for index in elementPositions:
            self.__elements.insert(index + incremento, newElements[nodePositions.index(index, 0, len(elementPositions))])
            incremento += 1

        # verificação da saída
        for n in self.__nodes:
            print('node: ', n)
        for e in self.__elements:
            print('element: ', e)