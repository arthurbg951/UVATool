# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form_uvatool.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from pickle import FALSE
from PyQt5 import QtCore, QtGui, QtWidgets

from form_draw import Ui_DrawForm
from form_results import Ui_ResultForm
from uvat import *


class Ui_UVATools(object):
    def setupUi(self, UVATools: QtWidgets.QApplication):
        UVATools.setObjectName("UVATools")
        UVATools.resize(850, 650)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/UVATool_main_window.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        UVATools.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(UVATools)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.graphicsViewCanvas = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsViewCanvas.setMinimumSize(QtCore.QSize(581, 511))
        self.graphicsViewCanvas.setObjectName("graphicsViewCanvas")
        self.verticalLayout.addWidget(self.graphicsViewCanvas)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEditXCanvas = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditXCanvas.setEnabled(False)
        self.lineEditXCanvas.setMaximumSize(QtCore.QSize(50, 20))
        self.lineEditXCanvas.setObjectName("lineEditXCanvas")
        self.horizontalLayout.addWidget(self.lineEditXCanvas)
        self.lineEditYCanvas = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditYCanvas.setEnabled(False)
        self.lineEditYCanvas.setMaximumSize(QtCore.QSize(50, 20))
        self.lineEditYCanvas.setObjectName("lineEditYCanvas")
        self.horizontalLayout.addWidget(self.lineEditYCanvas)
        self.lineEditSuportAngulation = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditSuportAngulation.setMinimumSize(QtCore.QSize(60, 20))
        self.lineEditSuportAngulation.setMaximumSize(QtCore.QSize(60, 20))
        self.lineEditSuportAngulation.setStyleSheet("QLineEdit {\n"
                                                    "    border-color:black;\n"
                                                    "    border-top: 4px;\n"
                                                    "}")
        self.lineEditSuportAngulation.setObjectName("lineEditSuportAngulation")
        self.horizontalLayout.addWidget(self.lineEditSuportAngulation)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.checkBoxGrid = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBoxGrid.setObjectName("checkBoxGrid")
        self.horizontalLayout.addWidget(self.checkBoxGrid)
        self.lineEditXGrid = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditXGrid.setEnabled(False)
        self.lineEditXGrid.setMaximumSize(QtCore.QSize(50, 20))
        self.lineEditXGrid.setObjectName("lineEditXGrid")
        self.horizontalLayout.addWidget(self.lineEditXGrid)
        self.lineEditYGrid = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditYGrid.setEnabled(False)
        self.lineEditYGrid.setMaximumSize(QtCore.QSize(50, 20))
        self.lineEditYGrid.setObjectName("lineEditYGrid")
        self.horizontalLayout.addWidget(self.lineEditYGrid)
        self.checkBoxGridSnap = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBoxGridSnap.setEnabled(False)
        self.checkBoxGridSnap.setObjectName("checkBoxGridSnap")
        self.horizontalLayout.addWidget(self.checkBoxGridSnap)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        UVATools.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(UVATools)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 850, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuProject = QtWidgets.QMenu(self.menubar)
        self.menuProject.setObjectName("menuProject")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        UVATools.setMenuBar(self.menubar)
        self.toolBarDraw = QtWidgets.QToolBar(UVATools)
        self.toolBarDraw.setMinimumSize(QtCore.QSize(0, 0))
        self.toolBarDraw.setAllowedAreas(QtCore.Qt.LeftToolBarArea | QtCore.Qt.RightToolBarArea | QtCore.Qt.TopToolBarArea)
        self.toolBarDraw.setIconSize(QtCore.QSize(32, 32))
        self.toolBarDraw.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBarDraw.setObjectName("toolBarDraw")
        UVATools.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBarDraw)
        self.dockWidgetResults = QtWidgets.QDockWidget(UVATools)
        self.dockWidgetResults.setMinimumSize(QtCore.QSize(200, 253))
        self.dockWidgetResults.setMaximumSize(QtCore.QSize(200, 524287))
        self.dockWidgetResults.setAccessibleName("")
        self.dockWidgetResults.setStyleSheet("QDockWidget{\n"
                                             "border:0px;\n"
                                             "}")
        self.dockWidgetResults.setFloating(False)
        self.dockWidgetResults.setFeatures(QtWidgets.QDockWidget.DockWidgetClosable | QtWidgets.QDockWidget.DockWidgetMovable)
        self.dockWidgetResults.setObjectName("dockWidgetResults")
        self.dockWidgetContentsResults = QtWidgets.QWidget()
        self.dockWidgetContentsResults.setObjectName("dockWidgetContentsResults")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.dockWidgetContentsResults)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.radioButton = QtWidgets.QRadioButton(self.dockWidgetContentsResults)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout_2.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.dockWidgetContentsResults)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout_2.addWidget(self.radioButton_2)
        self.comboBoxResultOptions = QtWidgets.QComboBox(self.dockWidgetContentsResults)
        self.comboBoxResultOptions.setMinimumSize(QtCore.QSize(0, 24))
        self.comboBoxResultOptions.setEditable(False)
        self.comboBoxResultOptions.setObjectName("comboBoxResultOptions")
        self.verticalLayout_2.addWidget(self.comboBoxResultOptions)
        self.listWidgetResults = QtWidgets.QListWidget(self.dockWidgetContentsResults)
        self.listWidgetResults.setViewMode(QtWidgets.QListView.ListMode)
        self.listWidgetResults.setObjectName("listWidgetResults")
        self.verticalLayout_2.addWidget(self.listWidgetResults)
        self.dockWidgetResults.setWidget(self.dockWidgetContentsResults)
        UVATools.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidgetResults)
        self.toolBarLoadings = QtWidgets.QToolBar(UVATools)
        self.toolBarLoadings.setIconSize(QtCore.QSize(32, 32))
        self.toolBarLoadings.setObjectName("toolBarLoadings")
        UVATools.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBarLoadings)
        self.actionNew = QtWidgets.QAction(UVATools)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/new_file.png"),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew.setIcon(icon1)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(UVATools)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/open.png"),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon2)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(UVATools)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/save.png"),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave.setIcon(icon3)
        self.actionSave.setObjectName("actionSave")
        self.actionExport = QtWidgets.QAction(UVATools)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/export.png"),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExport.setIcon(icon4)
        self.actionExport.setObjectName("actionExport")
        self.actionExt = QtWidgets.QAction(UVATools)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/exit.png"),QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExt.setIcon(icon5)
        self.actionExt.setObjectName("actionExt")
        self.first_class_support = QtWidgets.QAction(UVATools)
        self.first_class_support.setCheckable(True)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/apoio_primeiro_genero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.first_class_support.setIcon(icon6)
        self.first_class_support.setObjectName("first_class_support")
        self.second_class_support = QtWidgets.QAction(UVATools)
        self.second_class_support.setCheckable(True)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons/apoio_segundo_genero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.second_class_support.setIcon(icon7)
        self.second_class_support.setObjectName("second_class_support")
        self.tird_class_support = QtWidgets.QAction(UVATools)
        self.tird_class_support.setCheckable(True)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(
            "icons/apoio_terceiro_genero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tird_class_support.setIcon(icon8)
        self.tird_class_support.setObjectName("tird_class_support")
        self.semi_rigid_class_support = QtWidgets.QAction(UVATools)
        self.semi_rigid_class_support.setCheckable(True)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icons/apoio_semi_rigido.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.semi_rigid_class_support.setIcon(icon9)
        self.semi_rigid_class_support.setObjectName("semi_rigid_class_support")
        self.actionDraw = QtWidgets.QAction(UVATools)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icons/draw.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDraw.setIcon(icon10)
        self.actionDraw.setObjectName("actionDraw")
        self.actionDefaults = QtWidgets.QAction(UVATools)
        self.actionDefaults.setObjectName("actionDefaults")
        self.elementClass = QtWidgets.QAction(UVATools)
        self.elementClass.setCheckable(True)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("icons/element.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.elementClass.setIcon(icon11)
        self.elementClass.setObjectName("elementClass")
        self.actionOptions = QtWidgets.QAction(UVATools)
        self.actionOptions.setObjectName("actionOptions")
        self.nodalForces = QtWidgets.QAction(UVATools)
        self.nodalForces.setCheckable(True)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("icons/vertical_force.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.nodalForces.setIcon(icon12)
        self.nodalForces.setObjectName("nodalForces")
        self.nodalMoments = QtWidgets.QAction(UVATools)
        self.nodalMoments.setCheckable(True)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("icons/nodal_moments.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.nodalMoments.setIcon(icon13)
        self.nodalMoments.setObjectName("nodalMoments")
        self.uniformLoads = QtWidgets.QAction(UVATools)
        self.uniformLoads.setCheckable(True)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("icons/uniform_loads.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.uniformLoads.setIcon(icon14)
        self.uniformLoads.setObjectName("uniformLoads")
        self.linearLoads = QtWidgets.QAction(UVATools)
        self.linearLoads.setCheckable(True)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("icons/linear_loads.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.linearLoads.setIcon(icon15)
        self.linearLoads.setObjectName("linearLoads")
        self.actionProcess = QtWidgets.QAction(UVATools)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("icons/process.png"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionProcess.setIcon(icon16)
        self.actionProcess.setObjectName("actionProcess")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExt)
        self.menuProject.addAction(self.actionDefaults)
        self.menuProject.addSeparator()
        self.menuSettings.addAction(self.actionOptions)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.toolBarDraw.addAction(self.first_class_support)
        self.toolBarDraw.addAction(self.second_class_support)
        self.toolBarDraw.addAction(self.tird_class_support)
        self.toolBarDraw.addAction(self.semi_rigid_class_support)
        self.toolBarDraw.addAction(self.elementClass)
        self.toolBarDraw.addSeparator()
        self.toolBarDraw.addAction(self.actionDraw)
        self.toolBarDraw.addAction(self.actionProcess)
        self.toolBarLoadings.addAction(self.nodalForces)
        self.toolBarLoadings.addAction(self.nodalMoments)
        self.toolBarLoadings.addAction(self.uniformLoads)
        self.toolBarLoadings.addAction(self.linearLoads)

###############################################################################################################
        self.toolBarLoadings.hide()
        self.dockWidgetResults.hide()
        self.lineEditSuportAngulation.setEnabled(False)
        self.first_class_support.triggered.connect(self.primeiroGenero)
        self.second_class_support.triggered.connect(self.segundoGenero)
        self.tird_class_support.triggered.connect(self.terceiroGenero)
        self.semi_rigid_class_support.triggered.connect(self.semiRigido)
        self.elementClass.triggered.connect(self.elementClassToggle)
        self.checkBoxGrid.clicked.connect(self.activateGrid)
        self.actionProcess.triggered.connect(self.actionProcessClicked)

        self.actionDraw.triggered.connect(self.showDrawForm)
        self.canvas = Canvas()
        self.defaults = Defaults()
        self.elementPoint1 = None
        self.elementPoint2 = None

        self.comboBoxResultOptions.addItem("Nodes")
        self.comboBoxResultOptions.addItem("Elements")

        self.graphicsScene = QtWidgets.QGraphicsScene()
        self.graphicsScene.mousePressEvent = self.mousePressEventScene
        self.graphicsScene.setSceneRect(0, 0, 1,  1)
        self.graphicsScene.mousePressEvent = self.mousePressEventScene
        self.graphicsViewCanvas.setScene(self.graphicsScene)

        self.retranslateUi(UVATools)
        QtCore.QMetaObject.connectSlotsByName(UVATools)

    def showDrawForm(self):
        drawForm = QtWidgets.QDialog()
        ui = Ui_DrawForm()
        ui.setupUi(drawForm)
        ui.setCanvas(self.canvas)
        ui.fillNodeListStructure()
        ui.fillElementListStructure()
        ui.setGraphicsScene(self.graphicsScene)
        drawForm.show()
        drawForm.exec()

    def showResultsForm(self):
        resultsForm = QtWidgets.QDialog()
        ui = Ui_ResultForm()
        ui.setupUi(resultsForm)
        resultsForm.show()
        resultsForm.exec()

    def mousePressEventScene(self, event: QtWidgets.QGraphicsSceneMouseEvent):
        if QtCore.Qt.MouseButton.LeftButton == event.button():
            x = event.scenePos().x()
            y = event.scenePos().y()
            self.lineEditXCanvas.setText(str(x))
            self.lineEditYCanvas.setText(str(y))
            if self.verifySuportChecked() is not None:
                self.drawSupport(x, y)

            if self.elementClass.isChecked():
                self.drawElement(x, y)
            else:
                self.elementPoint1 = None
                self.elementPoint2 = None

        if QtCore.Qt.MouseButton.MiddleButton == event.button():
            print("MiddleButtonClick não implementado!")

    def mouseMoveEventScene(self, event: QtWidgets.QGraphicsSceneMouseEvent):
        x = event.pos().x()
        y = event.pos().y()
        self.lineEditXCanvas.setText(str(x))
        self.lineEditYCanvas.setText(str(y))
        self.update()

    def drawSupport(self, x: float, y: float):
        pixMap = QtGui.QPixmap(self.imageReturn())
        imagem = self.graphicsScene.addPixmap(pixMap)
        point = None
        if self.canvas.grid.isActive:
            xString = int(str(x)[:-2])
            yString = int(str(y)[:-2])
            # print(xString, yString)
            if xString % 10 < 5:
                xString = xString - xString % 10
            else:
                xString = xString + (10-xString % 10)

            if yString % 10 < 5:
                yString = yString - yString % 10
            else:
                yString = yString + (10-yString % 10)
            point = QtCore.QPointF(float(xString), float(yString))
        else:
            pointToDraw = QtCore.QPointF(
                x - self.correcaoClickImage()[0], y - self.correcaoClickImage()[1])
            point = QtCore.QPointF(x, y)
            imagem.setPos(pointToDraw)
            node = Node(point.x(), point.y())
            node.apoio = self.verifySuportChecked()
            self.canvas.nodes.append(node)
            self.canvas.drawnNodes.append(imagem)

        # Seta o item(imagem) desenhado para movimentar
        # imagem.setFlag(
        #  QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)

    def verifySuportChecked(self) -> Apoio:
        apoio = None
        if self.first_class_support.isChecked():
            apoio = Apoio.primeiroGenero
        if self.second_class_support.isChecked():
            apoio = Apoio.segundoGenero
        if self.tird_class_support.isChecked():
            apoio = Apoio.terceiroGenero
        if self.semi_rigid_class_support.isChecked():
            apoio = Apoio.semiRigido
        return apoio

    def imageReturn(self) -> str:
        apoio = self.verifySuportChecked()
        imagem = None
        if apoio == Apoio.primeiroGenero:
            imagem = "icons/apoio_primeiro_genero.png"
        elif apoio == Apoio.segundoGenero:
            imagem = "icons/apoio_segundo_genero.png"
        elif apoio == Apoio.terceiroGenero:
            imagem = "icons/apoio_terceiro_genero.png"
        elif apoio == Apoio.semiRigido:
            imagem = "icons/apoio_semi_rigido.png"
        return imagem

    def correcaoClickImage(self) -> list:
        apoio = self.verifySuportChecked()
        correcaoClickImagem = []
        if apoio == Apoio.primeiroGenero:
            correcaoClickImagem = [16, 5]
        elif apoio == Apoio.segundoGenero:
            correcaoClickImagem = [17, 7]
        elif apoio == Apoio.terceiroGenero:
            correcaoClickImagem = [17, 14]
        elif apoio == Apoio.semiRigido:
            correcaoClickImagem = [15, 12]
        return correcaoClickImagem

    def imageReturn(self) -> str:
        apoio = self.verifySuportChecked()
        imagem = None
        if apoio == Apoio.primeiroGenero:
            imagem = "icons/apoio_primeiro_genero.png"
        elif apoio == Apoio.segundoGenero:
            imagem = "icons/apoio_segundo_genero.png"
        elif apoio == Apoio.terceiroGenero:
            imagem = "icons/apoio_terceiro_genero.png"
        elif apoio == Apoio.semiRigido:
            imagem = "icons/apoio_semi_rigido.png"
        return imagem

    def drawElement(self, x: float, y: float) -> None:
        # print(x, y)
        if self.elementPoint1 == None:
            self.elementPoint1 = QtCore.QPointF(x, y)
            # print('p1 setado')
        else:
            self.elementPoint2 = QtCore.QPointF(x, y)
            # print('p2 setado')
        teste1 = self.elementPoint1 is not None
        teste2 = self.elementPoint2 is not None
        if teste1 and teste2:
            p1 = self.elementPoint1
            p2 = self.elementPoint2
            node1 = Node(p1.x(), p1.y())
            node2 = Node(p2.x(), p2.y())
            element = Element(node1, node2)
            line = self.graphicsScene.addLine(
                p1.x(), p1.y(), p2.x(), p2.y(), QtGui.QPen(QtCore.Qt.GlobalColor.black, 2))
            self.canvas.elements.append(element)
            self.canvas.drawnElements.append(line)
            self.elementPoint1 = None
            self.elementPoint2 = None

    def primeiroGenero(self):
        if self.first_class_support.isChecked():
            if self.semi_rigid_class_support.isChecked():
                self.semi_rigid_class_support.toggle()
            elif self.second_class_support.isChecked():
                self.second_class_support.toggle()
            elif self.tird_class_support.isChecked():
                self.tird_class_support.toggle()

    def segundoGenero(self):
        if self.second_class_support.isChecked():
            if self.first_class_support.isChecked():
                self.first_class_support.toggle()
            elif self.tird_class_support.isChecked():
                self.tird_class_support.toggle()
            elif self.semi_rigid_class_support.isChecked():
                self.semi_rigid_class_support.toggle()

    def terceiroGenero(self):
        if self.tird_class_support.isChecked():
            if self.first_class_support.isChecked():
                self.first_class_support.toggle()
            elif self.second_class_support.isChecked():
                self.second_class_support.toggle()
            elif self.semi_rigid_class_support.isChecked():
                self.semi_rigid_class_support.toggle()

    def semiRigido(self):
        if self.semi_rigid_class_support.isChecked():
            if self.first_class_support.isChecked():
                self.first_class_support.toggle()
            elif self.second_class_support.isChecked():
                self.second_class_support.toggle()
            elif self.tird_class_support.isChecked():
                self.tird_class_support.toggle()

    def elementClassToggle(self):
        apoio = self.verifySuportChecked()
        if apoio == None:
            self.tird_class_support.toggle()
        if not self.elementClass.isChecked():
            if self.semi_rigid_class_support.isChecked():
                self.semi_rigid_class_support.toggle()
            elif self.first_class_support.isChecked():
                self.first_class_support.toggle()
            elif self.second_class_support.isChecked():
                self.second_class_support.toggle()
            elif self.tird_class_support.isChecked():
                self.tird_class_support.toggle()
            elif self.semi_rigid_class_support.isChecked():
                self.semi_rigid_class_support.toggle()

    # def disableButton(self, button: QtWidgets.QAction):
    #     first =
    #     second
    #     tird
    #     rigid
    #     element

    def activateGrid(self):
        if self.checkBoxGrid.isChecked():
            self.lineEditXGrid.setEnabled(True)
            self.lineEditYGrid.setEnabled(True)
            self.checkBoxGridSnap.setEnabled(True)
            self.drawGrid()
        else:
            self.lineEditXGrid.setEnabled(False)
            self.lineEditXGrid.setText("")
            self.lineEditYGrid.setEnabled(False)
            self.lineEditYGrid.setText("")
            self.checkBoxGridSnap.setEnabled(False)
            self.removeGrid()

    def drawGrid(self):
        self.canvas.grid.isActive = True
        xLength = int(self.graphicsViewCanvas.size().width()/20)
        yLength = int(self.graphicsViewCanvas.size().height()/20)
        for i in range(-xLength, xLength, 1):
            for j in range(-yLength, yLength, 1):
                self.canvas.grid.points.append(self.graphicsScene.addEllipse(i*10, j * 10, 1, 1, QtGui.QPen(
                    QtCore.Qt.GlobalColor.black)))
        # self.canvas.grid.points.append(self.graphicsScene.addEllipse(
        #     0, 0, 1, 1, QtGui.QPen(QtCore.Qt.GlobalColor.black)))

    def removeGrid(self):
        for point in self.canvas.grid.points:
            self.graphicsScene.removeItem(point)
        self.canvas.grid.points = []
        self.canvas.grid.isActive = False

    def actionProcessClicked(self):
        print('Execução dos cálculos não implementado!')
        if self.dockWidgetResults.isHidden():
            self.dockWidgetResults.show()
        else:
            self.dockWidgetResults.hide()


###############################################################################################################

    def retranslateUi(self, UVATools):
        _translate = QtCore.QCoreApplication.translate
        UVATools.setWindowTitle(_translate("UVATools", "UVATool"))
        self.lineEditXCanvas.setPlaceholderText(_translate("UVATools", "X"))
        self.lineEditYCanvas.setPlaceholderText(_translate("UVATools", "Y"))
        self.lineEditSuportAngulation.setPlaceholderText(
            _translate("UVATools", "support º"))
        self.checkBoxGrid.setText(_translate("UVATools", "Grid"))
        self.lineEditXGrid.setPlaceholderText(_translate("UVATools", "X"))
        self.lineEditYGrid.setPlaceholderText(_translate("UVATools", "Y"))
        self.checkBoxGridSnap.setText(_translate("UVATools", "Snap"))
        self.menuFile.setTitle(_translate("UVATools", "File"))
        self.menuProject.setTitle(_translate("UVATools", "Project"))
        self.menuSettings.setTitle(_translate("UVATools", "Settings"))
        self.toolBarDraw.setWindowTitle(_translate("UVATools", "Supports"))
        self.dockWidgetResults.setToolTip(_translate("UVATools", "Results"))
        self.dockWidgetResults.setStatusTip(_translate("UVATools", "Results"))
        self.dockWidgetResults.setAccessibleDescription(
            _translate("UVATools", "Results"))
        self.dockWidgetResults.setWindowTitle(
            _translate("UVATools", "Analysis Results"))
        self.radioButton.setText(_translate("UVATools", "Análise elastica:\n"
                                            "  Método da rigidez analítica"))
        self.radioButton_2.setText(_translate("UVATools", "Análise rígido plastica:\n"
                                              "  Mínima norma Euclidiana"))
        self.toolBarLoadings.setWindowTitle(_translate("UVATools", "toolBar"))
        self.actionNew.setText(_translate("UVATools", "New..."))
        self.actionOpen.setText(_translate("UVATools", "Open..."))
        self.actionSave.setText(_translate("UVATools", "Save"))
        self.actionExport.setText(_translate("UVATools", "Export"))
        self.actionExt.setText(_translate("UVATools", "Exit"))
        self.first_class_support.setText(
            _translate("UVATools", "first-class support"))
        self.first_class_support.setToolTip(_translate(
            "UVATools", "First-class support for drawing"))
        self.second_class_support.setText(
            _translate("UVATools", "second-class support"))
        self.second_class_support.setToolTip(_translate(
            "UVATools", "Second-class support for drawing"))
        self.tird_class_support.setText(
            _translate("UVATools", "tird-class support"))
        self.tird_class_support.setToolTip(_translate(
            "UVATools", "Tird-class support for drawing"))
        self.semi_rigid_class_support.setText(
            _translate("UVATools", "semi_rigid_class_support"))
        self.semi_rigid_class_support.setToolTip(
            _translate("UVATools", "Semi rigid support"))
        self.actionDraw.setText(_translate("UVATools", "Draw"))
        self.actionDraw.setToolTip(_translate("UVATools", "Draw on Canvas"))
        self.actionDefaults.setText(_translate("UVATools", "Defaults"))
        self.elementClass.setText(_translate("UVATools", "elementClass"))
        self.elementClass.setToolTip(_translate("UVATools", "Element"))
        self.actionOptions.setText(_translate("UVATools", "Options"))
        self.nodalForces.setText(_translate("UVATools", "nodalForces"))
        self.nodalForces.setToolTip(_translate("UVATools", "Vertical Force"))
        self.nodalMoments.setText(_translate("UVATools", "nodalMoments"))
        self.nodalMoments.setToolTip(_translate("UVATools", "Nodal Moments"))
        self.uniformLoads.setText(_translate("UVATools", "uniformLoads"))
        self.uniformLoads.setToolTip(_translate("UVATools", "Uniform Loads"))
        self.linearLoads.setText(_translate("UVATools", "linearLoads"))
        self.linearLoads.setToolTip(_translate("UVATools", "Linear Loads"))
        self.actionProcess.setText(_translate("UVATools", "Process"))
        self.actionProcess.setToolTip(
            _translate("UVATools", "Process Calculations"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    UVATools = QtWidgets.QMainWindow()
    ui = Ui_UVATools()
    ui.setupUi(UVATools)
    UVATools.show()
    sys.exit(app.exec_())
