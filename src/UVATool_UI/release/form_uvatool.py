# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form_uvatool.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from form_draw import Ui_DrawForm
from form_results import Ui_ResultForm


class Ui_UVATools(object):
    def setupUi(self, UVATools):
        UVATools.setObjectName("UVATools")
        UVATools.resize(803, 622)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/UVATool_main_window.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        UVATools.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(UVATools)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setMinimumSize(QtCore.QSize(581, 511))
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 0, 0, 1, 1)
        UVATools.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(UVATools)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 803, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        UVATools.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(UVATools)
        self.toolBar.setMinimumSize(QtCore.QSize(0, 0))
        self.toolBar.setAllowedAreas(QtCore.Qt.LeftToolBarArea|QtCore.Qt.RightToolBarArea|QtCore.Qt.TopToolBarArea)
        self.toolBar.setIconSize(QtCore.QSize(32, 32))
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBar.setObjectName("toolBar")
        UVATools.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(UVATools)
        self.toolBar_2.setObjectName("toolBar_2")
        UVATools.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        self.actionNew = QtWidgets.QAction(UVATools)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(UVATools)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(UVATools)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(UVATools)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionExport = QtWidgets.QAction(UVATools)
        self.actionExport.setObjectName("actionExport")
        self.actionExt = QtWidgets.QAction(UVATools)
        self.actionExt.setObjectName("actionExt")
        self.first_class_support = QtWidgets.QAction(UVATools)
        self.first_class_support.setCheckable(True)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/apoio_primeiro_genero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.first_class_support.setIcon(icon1)
        self.first_class_support.setObjectName("first_class_support")
        self.first_class_support.triggered.connect(self.primeiroGenero)
        self.second_class_support_2 = QtWidgets.QAction(UVATools)
        self.second_class_support_2.setCheckable(True)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/apoio_segundo_genero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.second_class_support_2.setIcon(icon2)
        self.second_class_support_2.setObjectName("second_class_support_2")
        self.second_class_support_2.triggered.connect(self.segundoGenero)
        self.tird_class_support_3 = QtWidgets.QAction(UVATools)
        self.tird_class_support_3.setCheckable(True)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/apoio_terceiro_genero.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tird_class_support_3.setIcon(icon3)
        self.tird_class_support_3.setObjectName("tird_class_support_3")
        self.tird_class_support_3.triggered.connect(self.terceiroGenero)
        self.semi_rigid_class_support = QtWidgets.QAction(UVATools)
        self.semi_rigid_class_support.setCheckable(True)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/apoio_semi_rigido.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.semi_rigid_class_support.setIcon(icon4)
        self.semi_rigid_class_support.setObjectName("semi_rigid_class_support")
        self.semi_rigid_class_support.triggered.connect(self.semiRigido)
        self.actionDraw = QtWidgets.QAction(UVATools)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/draw.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDraw.setIcon(icon5)
        self.actionDraw.setObjectName("actionDraw")
        self.actionDraw.triggered.connect(self.showDrawForm)
        self.actionTable = QtWidgets.QAction(UVATools)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/table.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTable.setIcon(icon6)
        self.actionTable.setObjectName("actionTable")
        self.actionTable.triggered.connect(self.showResultsForm)
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExt)
        self.menubar.addAction(self.menuFile.menuAction())
        self.toolBar.addAction(self.first_class_support)
        self.toolBar.addAction(self.second_class_support_2)
        self.toolBar.addAction(self.tird_class_support_3)
        self.toolBar.addAction(self.semi_rigid_class_support)
        self.toolBar_2.addAction(self.actionDraw)
        self.toolBar_2.addAction(self.actionTable)

        self.image = ""
        # self.canDrawOnCanvas = True
        self.correcaoClickImagem = [16, 5]
        self.graphicsScene = QtWidgets.QGraphicsScene()
        self.graphicsScene.mousePressEvent = self.mousePressEventScene
        self.graphicsScene.setSceneRect(0, 0, 100,  100)
        self.graphicsScene.mousePressEvent = self.mousePressEventScene
        self.graphicsView.setScene(self.graphicsScene)
        self.gridActive = False
        if self.gridActive:
            for i in range(-50, 50, 1):
                for j in range(-50, 50, 1):
                    self.graphicsScene.addEllipse(i*10, j * 10, 1, 1, QtGui.QPen(
                        QtCore.Qt.GlobalColor.black), QtGui.QBrush(QtCore.Qt.BrushStyle.SolidPattern))


        self.retranslateUi(UVATools)
        QtCore.QMetaObject.connectSlotsByName(UVATools)
    

    def showDrawForm(self):
        drawForm = QtWidgets.QDialog()
        ui = Ui_DrawForm()
        ui.setupUi(drawForm)
        drawForm.show()
        drawForm.exec()
    
    def showResultsForm(self):
        resultsForm = QtWidgets.QDialog()
        ui = Ui_ResultForm()
        ui.setupUi(resultsForm)
        resultsForm.show()
        resultsForm.exec()
    
    def mousePressEventScene(self, event: QtWidgets.QGraphicsSceneMouseEvent):
        x = event.scenePos().x() 
        y = event.scenePos().y() 
        # xString = x[0]+x[1]+
        pixMap = QtGui.QPixmap(self.image)
        imagem = self.graphicsScene.addPixmap(pixMap)
        point = None
        if self.gridActive:
            xString = int(str(x)[:-2])
            yString = int(str(y)[:-2])

            if xString % 10 < 5:
                xString = xString - xString % 10
            else:
                xString = xString + (10-xString % 10)

            if yString % 10 < 5:
                yString = yString - yString % 10
            else:
                yString = yString + (10-yString % 10)
            print('VALORES DE X E Y ALTERADOS')
            print(xString, yString)
            point = QtCore.QPointF(float(xString), float(yString))
        else:
            point = QtCore.QPointF(
                x - self.correcaoClickImagem[0], y - self.correcaoClickImagem[1])
        imagem.setPos(point)
        imagem.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)

    def primeiroGenero(self):
        self.image = "icons/apoio_primeiro_genero.png"
        self.correcaoClickImagem = [16, 5]
        if self.semi_rigid_class_support.isChecked():
            self.semi_rigid_class_support.toggle()
        if self.second_class_support_2.isChecked():
            self.second_class_support_2.toggle()
        if self.tird_class_support_3.isChecked():
            self.tird_class_support_3.toggle()

    def segundoGenero(self):
        self.image = "icons/apoio_segundo_genero.png"
        self.correcaoClickImagem = [17, 7]
        if self.first_class_support.isChecked():
            self.first_class_support.toggle()
        if self.tird_class_support_3.isChecked():
            self.tird_class_support_3.toggle()
        if self.semi_rigid_class_support.isChecked():
            self.semi_rigid_class_support.toggle()

    def terceiroGenero(self):
        self.image = "icons/apoio_terceiro_genero.png"
        self.correcaoClickImagem = [17, 14]
        if self.first_class_support.isChecked():
            self.first_class_support.toggle()
        if self.second_class_support_2.isChecked():
            self.second_class_support_2.toggle()
        if self.semi_rigid_class_support.isChecked():
            self.semi_rigid_class_support.toggle()

    def semiRigido(self):
        self.image = "icons/apoio_semi_rigido.png"
        self.correcaoClickImagem = [15, 12]
        if self.first_class_support.isChecked():
            self.first_class_support.toggle()
        if self.second_class_support_2.isChecked():
            self.second_class_support_2.toggle()
        if self.tird_class_support_3.isChecked():
            self.tird_class_support_3.toggle()

    def retranslateUi(self, UVATools):
        _translate = QtCore.QCoreApplication.translate
        UVATools.setWindowTitle(_translate("UVATools", "UVATool"))
        self.menuFile.setTitle(_translate("UVATools", "File"))
        self.toolBar.setWindowTitle(_translate("UVATools", "Supports"))
        self.toolBar_2.setWindowTitle(_translate("UVATools", "Draw"))
        self.actionNew.setText(_translate("UVATools", "New..."))
        self.actionOpen.setText(_translate("UVATools", "Open..."))
        self.actionSave.setText(_translate("UVATools", "Save"))
        self.actionSave_as.setText(_translate("UVATools", "Save as..."))
        self.actionExport.setText(_translate("UVATools", "Export"))
        self.actionExt.setText(_translate("UVATools", "Exit"))
        self.first_class_support.setText(_translate("UVATools", "first-class support"))
        self.first_class_support.setToolTip(_translate("UVATools", "First-class support for drawing"))
        self.second_class_support_2.setText(_translate("UVATools", "second-class support"))
        self.second_class_support_2.setToolTip(_translate("UVATools", "Second-class support for drawing"))
        self.tird_class_support_3.setText(_translate("UVATools", "tird-class support"))
        self.tird_class_support_3.setToolTip(_translate("UVATools", "Tird-class support for drawing"))
        self.semi_rigid_class_support.setText(_translate("UVATools", "semi_rigid_class_support"))
        self.semi_rigid_class_support.setToolTip(_translate("UVATools", "Semi rigid support"))
        self.actionDraw.setText(_translate("UVATools", "Draw"))
        self.actionDraw.setToolTip(_translate("UVATools", "Draw on Canvas"))
        self.actionTable.setText(_translate("UVATools", "Table"))
        self.actionTable.setToolTip(_translate("UVATools", "View Table"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    UVATools = QtWidgets.QMainWindow()
    ui = Ui_UVATools()
    ui.setupUi(UVATools)
    UVATools.show()
    sys.exit(app.exec_())
